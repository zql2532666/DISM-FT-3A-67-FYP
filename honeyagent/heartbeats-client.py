""" 
HeartBeat client: sends an UDP packet to a given server every 10 seconds.

    Adjust the constant parameters as needed, in honeyagent.conf
"""

from socket import socket, AF_INET, SOCK_DGRAM,SOCK_STREAM
import socket
from time import time, ctime, sleep
import sys
import multiprocessing
import threading
import json
from configparser import ConfigParser
# import socket

"""
heart beat signals will sent to the server (SERVIERIP) per time specified 
by HELLO_INTERVAL
"""
config = ConfigParser()
# honeyagent.conf is generated by the deployment bash script
config.read('honeyagent.conf')


#C2 SERVER INFO
SERVER_IP = config['C2-SERVER']['SERVER_IP']                    
SERVER_HB_PORT = int(config['HEARTBEATS']['SERVER_HB_PORT'])            
HELLO_INTERVAL = int(config['HEARTBEATS']['HELLO_INTERVAL'])               
SERVER_HANDSHAKE_PORT = int(config['C2-SERVER']['SERVER_HANDSHAKE_PORT'])


# HONEYNODE INFO
TOKEN = config['HONEYNODE']['TOKEN']
HONEYNODE_NAME = config['HONEYNODE']['HONEYNODE_NAME']
HONEYNODE_IP = config['HONEYNODE']['IP']
HONEYNODE_SUBNET_MASK = config['HONEYNODE']['SUBNET_MASK']
HONEYNODE_HONEYPOT_TYPE = config['HONEYNODE']['HONEYPOT_TYPE']
HONEYNODE_NIDS_TYPE = config['HONEYNODE']['NIDS_TYPE']
HONEYNODE_DEPLOYED_DATE = config['HONEYNODE']['DEPLOYED_DATE']
HONEYNODE_COMMAND_PORT = int(config['HONEYNODE']['COMMAND_PORT'])


# heartbeat_data = {
#     "token": TOKEN,
#     "honeynode_name": HONEYNODE_NAME,
#     "ip_addr": HONEYNODE_IP,
#     "subnet_mask": HONEYNODE_SUBNET_MASK,
#     "honeypot_type": HONEYNODE_HONEYPOT_TYPE,
#     "nids_type": HONEYNODE_NIDS_TYPE,
#     "deployed_date": HONEYNODE_DEPLOYED_DATE,
#     "msg": "HEARTBEATS"
# }


heartbeat_data = {
    "token": TOKEN,
    "msg": "HEARTBEATS"
}

heartbeat_data_json = json.dumps(heartbeat_data)

print (f"HeartBeat client sending to IP {SERVER_IP} , {SERVER_HB_PORT}")
print ("\n*** Press Ctrl-C to terminate ***\n")
def send_heartbeats():
    data_encoded = heartbeat_data_json.encode('utf-8')
    # print(f"heartbeats size: {len(data_encoded)}")
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as hbsocket:
            while 1:
                hbsocket.sendto(data_encoded, (SERVER_IP, SERVER_HB_PORT))
                if __debug__:
                    print (f"Time: {ctime(time())}")
                sleep(HELLO_INTERVAL)
    except socket.error as e:
        print(f"Error creating HeartBeat Socket\n {e}")

send_heartbeats()


# process_list=list()
# if __name__ == '__main__':   
#     for _ in range(10):
#         p = multiprocessing.Process(target=send_heartbeats)
#         p.start()
#         process_list.append(p)

#     for p in process_list:
#         p.join()



"""
process 1: send_heartbeats --> always running 
process 2: listen for commands --> always running 
            when receive a command, make a new thread to process it 
                p2: threads --> process_command_from_c2()
                                    send_handshake_data() --> once when the agent receives the "handshake" command
                                    kill()

"""

