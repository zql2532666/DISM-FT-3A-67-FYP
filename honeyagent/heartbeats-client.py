""" 
HeartBeat client: sends an UDP packet to a given server every 10 seconds.

    Adjust the constant parameters as needed, in honeyagent.conf
"""

from socket import socket, AF_INET, SOCK_DGRAM,SOCK_STREAM
import socket
from time import time, ctime, sleep
import sys
import multiprocessing
import threading
import json
from configparser import ConfigParser
# import socket

"""
heart beat signals will sent to the server (SERVIERIP) per time specified 
by HELLO_INTERVAL
"""
config = ConfigParser()
# honeyagent.conf is generated by the deployment bash script
config.read('honeyagent.conf')

#C2 SERVER INFO
SERVER_IP = config['C2-SERVER']['SERVER_IP']                    
SERVER_HB_PORT = int(config['HEARTBEATS']['SERVER_HB_PORT'])            
HELLO_INTERVAL = int(config['HEARTBEATS']['HELLO_INTERVAL'])               
SERVER_HANDSHAKE_PORT = int(config['C2-SERVER']['SERVER_HANDSHAKE_PORT'])

# WEB SERVER INFO
WEB_SERVER_IP = config['WEB-SERVER']['SERVER_IP']


# HONEYNODE INFO
TOKEN = config['HONEYNODE']['TOKEN']
HONEYNODE_NAME = config['HONEYNODE']['HONEYNODE_NAME']
HONEYNODE_IP = config['HONEYNODE']['IP']
HONEYNODE_SUBNET_MASK = config['HONEYNODE']['SUBNET_MASK']
HONEYNODE_HONEYPOT_TYPE = config['HONEYNODE']['HONEYPOT_TYPE']
HONEYNODE_NIDS_TYPE = config['HONEYNODE']['NIDS_TYPE']
HONEYNODE_DEPLOYED_DATE = config['HONEYNODE']['DEPLOYED_DATE']
HONEYNODE_COMMAND_PORT = int(config['HONEYNODE']['COMMAND_PORT'])


heartbeat_data = {
    "token": TOKEN,
    "honeynode_name": HONEYNODE_NAME,
    "ip_addr": HONEYNODE_IP,
    "subnet_mask": HONEYNODE_SUBNET_MASK,
    "honeypot_type": HONEYNODE_HONEYPOT_TYPE,
    "nids_type": HONEYNODE_NIDS_TYPE,
    "deployed_date": HONEYNODE_DEPLOYED_DATE,
    "msg": "HEARTBEATS"
}

handshake_data = {
    "token": TOKEN,
    "honeynode_name": HONEYNODE_NAME,
    "ip_addr": HONEYNODE_IP,
    "subnet_mask": HONEYNODE_SUBNET_MASK,
    "honeypot_type": HONEYNODE_HONEYPOT_TYPE,
    "nids_type": HONEYNODE_NIDS_TYPE,
    "deployed_date": HONEYNODE_DEPLOYED_DATE,
    "msg": "HANDSHAKE"
}

heartbeat_data_json = json.dumps(heartbeat_data)
handshake_data_json = json.dumps(handshake_data)

print (f"HeartBeat client sending to IP {SERVER_IP} , {SERVER_HB_PORT}")
print ("\n*** Press Ctrl-C to terminate ***\n")
def send_heartbeats():
    data_encoded = heartbeat_data_json.encode('utf-8')
    print(f"heartbeats size: {len(data_encoded)}")
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as hbsocket:
            while 1:
                hbsocket.sendto(data_encoded, (SERVER_IP, SERVER_HB_PORT))
                if __debug__:
                    print (f"Time: {ctime(time())}")
                sleep(HELLO_INTERVAL)
    except socket.error as e:
        print(f"Error creating HeartBeat Socket\n {e}")

# data might get lost if u send over udp, think about sending the web api directly or 
# have a tcp port sitting on the main server, listening for handshake data

def send_handshake_data():
    data_encoded = handshake_data_json.encode('utf-8')
    # ... call the http end point here
    # on the flask, check if there is a duplicate token, if there is , update 
    # the status us, active. If not, add this as a new honeypot

    # try:
    #     with socket.socket(socket.AF_INET,socket.SOCK_STREAM) as s:
    #         s.connect((SERVER_IP, SERVER_HANDSHAKE_PORT))
    #         s.sendall(data_encoded)
    # except socket.error as e:
    #     print(f"Error creating Handshake Socket\n {e}")

def listen_for_commands():
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            print("listening for commands")
            s.bind(('127.0.0.1',HONEYNODE_COMMAND_PORT))
            s.listen()
            conn, addr = s.accept()
            with conn:
                print(f"Command received from {addr}")
                while True:
                    data = conn.recv(1024)
                    if not data:
                        break
                data = data.decode('utf-8')
                data = json.loads(data)
                print(data)
                """
                    the command should look like 
                    {"command" : "handshake"}
                """
    except socket.error as e:
        print(f"Error creating commmand Socket\n {e}")
    # run this as a new thread --> process_command_from_c2(data["command"])


process_list=list()
if __name__ == '__main__':   
    p1 = multiprocessing.Process(target=send_heartbeats)
    p2 = multiprocessing.Process(target=listen_for_commands)
    p1.start()
    p2.start()
    p1.join()
    p2.join()

    # for p in process_list:
    #     p.join()

"""
process 1: send_heartbeats --> always running 
process 2: listen for commands --> always running 
            when receive a command, make a new thread to process it 
                p2: threads --> process_command_from_c2()
                                    send_handshake_data() --> once when the agent receives the "handshake" command
                                    kill()

"""

def process_command_from_c2(command):
    if (command == "handshake"):
        # send_handshake_data() as thread
        print("handshake")
    elif (command == "kill"):
        # kill the honeyagent program + hp feeds
        print("kill")
